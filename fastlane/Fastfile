# fastlane/Fastfile

org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates (WRITE), –∫–∞–∫ –≤ CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  desc "Build .ipa for App Store (native)"
  lane :build do
    # 0) –Ω–∞–¥—ë–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ keychain –¥–ª—è CI (—á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–∏—Å–∞–ª codesign)
    setup_ci

    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–≤–æ–π keychain —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –±–ª–æ–∫ –Ω–∏–∂–µ
    # create_keychain(
    #   name: "build.keychain",
    #   password: ENV["KEYCHAIN_PASSWORD"] || "temp_pass_123",
    #   default_keychain: true,
    #   unlock: true,
    #   timeout: 3600,
    #   lock_when_sleeps: false
    # )

    # 1) –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–¥—Å–∞–π–Ω–∏–Ω–≥
    sync_certificates

    # 2) –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    scheme          = (ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]).to_s.strip
    workspace_input = (ENV["XCODE_WORKSPACE"] || "").to_s.strip
    project_input   = (ENV["XCODE_PROJECT"]   || "").to_s.strip
    project_input   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project_input.empty? && !ENV["PROJECT_NAME"].to_s.empty?

    # 3) –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (Fastfile –ª–µ–∂–∏—Ç –≤ fastlane/, —É—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
    repo_root = File.expand_path("..", __dir__)

    # 4) –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    workspace_path = workspace_input.empty? ? nil : File.expand_path(workspace_input, repo_root)
    project_path   = project_input.empty?   ? nil : File.expand_path(project_input,   repo_root)

    # 5) –∞–≤—Ç–æ-–ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if workspace_path.nil? && project_path.nil?
      found_ws = Dir[File.join(repo_root, "*.xcworkspace")].first
      found_pr = Dir[File.join(repo_root, "*.xcodeproj")].first
      workspace_path = found_ws if found_ws
      project_path   = found_pr if found_pr
    end

    # 6) –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥
    UI.user_error!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω workspace –∏–ª–∏ project ‚Äî —É–∫–∞–∂–∏ XCODE_WORKSPACE –∏–ª–∏ PROJECT_NAME.") if workspace_path.nil? && project_path.nil?
    UI.user_error!("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ö–µ–º–∞ —Å–±–æ—Ä–∫–∏ (IOS_SCHEME/PROJECT_NAME).") if scheme.empty?

    UI.message "üìÇ repo_root: #{repo_root}"
    UI.message "‚û°Ô∏è  Using scheme: #{scheme}"
    UI.message "‚û°Ô∏è  Using workspace: #{workspace_path}" if workspace_path
    UI.message "‚û°Ô∏è  Using project:   #{project_path}"   if project_path
    UI.message "üß© workspace exists? #{File.exist?(workspace_path)}" if workspace_path
    UI.message "üß© project exists?   #{File.exist?(project_path)}"   if project_path

    # 7) —è–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π 'Urban Road Noise Notifications'
    main_id = ENV["IOS_BUNDLE_ID"]
    ext_id  = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    provisioning_profiles = {}
    if main_id && !main_id.empty?
      provisioning_profiles[main_id] = ENV["sigh_#{main_id}_appstore_profile-name"]
    end
    if ext_id && !ext_id.empty?
      provisioning_profiles[ext_id]  = ENV["sigh_#{ext_id}_appstore_profile-name"]
    end

    common = {
      scheme: scheme,
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates",
      output_directory: File.join(repo_root, "build/iOS/ipa_out"),
      export_options: {
        provisioningProfiles: provisioning_profiles
      }
    }

    # 8) —Å–±–æ—Ä–∫–∞
    if workspace_path
      build_app(common.merge(workspace: workspace_path))
    else
      build_app(common.merge(project: project_path))
    end
  end
end
