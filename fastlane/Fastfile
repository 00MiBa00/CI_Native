org, repo = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"] || "").split("/")

default_platform(:ios)

platform :ios do
  private_lane :run_match do |options|
    match(
      type: "appstore",
      readonly: options[:readonly],
      git_url: "git@github.com:#{ENV["MATCH_REPOSITORY"]}.git",
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV["IOS_BUNDLE_ID"]}.notifications"
      ]
    )
  end

  lane :ensure_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    begin
      UI.message("🔐 match: readonly=true")
      run_match(readonly: true)
    rescue => e
      UI.important("readonly failed, fallback to write mode: #{e}")
      run_match(readonly: false)
    end
  end

  lane :generate_certs do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo
    )
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    run_match(readonly: false)
  end

  lane :init_ci do
    ensure_certs
    begin
      install_pods
    rescue => e
      UI.important("Pods install skipped/failed: #{e}")
    end
    workspace_path = Dir["*.xcworkspace", "ios/*.xcworkspace"].first
    if workspace_path
      build_app(
        workspace: workspace_path,
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    else
      build_app(
        project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj",
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    end
    pilot(skip_waiting_for_build_processing: true)
  end
end
