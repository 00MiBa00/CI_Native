org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  # == One-time: —Å–æ–∑–¥–∞—Ç—å writable deploy key –≤ match-—Ä–µ–ø–æ (–∫–∞–∫ –≤ CI_Core)
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  # == –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥—Å–∞–π–Ω–∞ (WRITE) ‚Äî –∫–∞–∫ –≤ CI_Core
  desc "Sync codesigning certificates (WRITE), –∫–∞–∫ –≤ CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id  = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  # == –°–±–æ—Ä–∫–∞ .ipa –¥–ª—è App Store (–Ω–∞—Ç–∏–≤–∫–∞)
  desc "Build .ipa for App Store (native)"
  lane :build do
    # 1Ô∏è‚É£ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–¥—Å–∞–π–Ω–∏–Ω–≥
    sync_certificates

    # 2Ô∏è‚É£ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ —Ä–∞–Ω–Ω–µ—Ä–µ,
    #    —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ *.xcworkspace/*.xcodeproj —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    Dir.chdir(ENV["GITHUB_WORKSPACE"] || ".") do
      UI.message("üìÇ PWD: #{Dir.pwd}")
      UI.message("üìÑ Root files: #{Dir['*'].join(', ')}")

      # 3Ô∏è‚É£ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
      scheme          = (ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]).to_s.strip
      workspace_input = (ENV["XCODE_WORKSPACE"] || "").to_s.strip
      project_input   = (ENV["XCODE_PROJECT"]   || "").to_s.strip
      project_input   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project_input.empty? && !ENV["PROJECT_NAME"].to_s.empty?

      # 4Ô∏è‚É£ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å workspace/project
      workspace = if !workspace_input.empty? && File.exist?(workspace_input)
                    workspace_input
                  else
                    Dir["*.xcworkspace"].first
                  end

      project = if !project_input.empty? && File.exist?(project_input) && project_input.end_with?(".xcodeproj")
                  project_input
                else
                  Dir["*.xcodeproj"].first
                end

      # 5Ô∏è‚É£ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      UI.user_error!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω workspace –∏–ª–∏ project ‚Äî —É–∫–∞–∂–∏ XCODE_WORKSPACE –∏–ª–∏ PROJECT_NAME.") if workspace.nil? && project.nil?
      UI.user_error!("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ö–µ–º–∞ —Å–±–æ—Ä–∫–∏ (IOS_SCHEME/PROJECT_NAME).") if scheme.empty?

      UI.message("‚û°Ô∏è  Using scheme: #{scheme}")
      UI.message("‚û°Ô∏è  Using workspace: #{workspace}") if workspace
      UI.message("‚û°Ô∏è  Using project:   #{project}")   if project

      # 6Ô∏è‚É£ —Å–±–æ—Ä–∫–∞
      common = {
        scheme: scheme,
        export_method: "app-store",
        xcargs: "-allowProvisioningUpdates",
        output_directory: "build/iOS/ipa_out"
      }

      if workspace
        build_app(common.merge(workspace: workspace))
      else
        build_app(common.merge(project: project))
      end
    end
  end
end
