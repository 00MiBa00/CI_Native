default_platform(:ios)

platform :ios do
  # Helper to run match with our common params
  private_lane :run_match do |options|
    match(
      type: "appstore",
      readonly: options[:readonly],
      git_url: ENV["MATCH_GIT_URL"],
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV["IOS_BUNDLE_ID"]}.notifications"
      ],
      clone_branch_directly: true
    )
  end

  # Auto-fallback: try readonly first; if not found -> write mode
  lane :ensure_certs do
    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )

    begin
      UI.message("üîê match: trying readonly=true")
      run_match(readonly: true)
      UI.success("‚úÖ match readonly succeeded")
    rescue => e
      UI.important("‚ö†Ô∏è readonly failed: #{e.class}: #{e.message}")
      UI.important("‚û°Ô∏è switching to readonly=false to create/update certs & profiles")
      run_match(readonly: false)
      UI.success("‚úÖ match write mode succeeded")
    end
  end

  # Main CI lane: ensures certs (with fallback) -> build -> upload
  lane :init_ci do
    ensure_certs

    # If your project uses CocoaPods, uncomment next line
    # cocoapods(silent: true)

    gym(
      project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj",
      scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
      export_method: "app-store",
      clean: true
    )

    pilot(skip_waiting_for_build_processing: true)
  end

  # Manual write-only lane (optional) if you want explicit control
  lane :generate_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    UI.message("üîê match: force write mode (readonly=false)")
    run_match(readonly: false)
  end
end
