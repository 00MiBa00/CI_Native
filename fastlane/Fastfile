org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates (WRITE), –∫–∞–∫ –≤ CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  desc "Build .ipa for App Store (native)"
  lane :build do
    sync_certificates

    scheme          = (ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]).to_s.strip
    workspace_input = (ENV["XCODE_WORKSPACE"] || "").strip
    project_input   = (ENV["XCODE_PROJECT"]   || "").strip
    project_input   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project_input.empty? && !ENV["PROJECT_NAME"].to_s.empty?

    # –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    workspace = nil
    project   = nil
    if !workspace_input.empty? && File.exist?(workspace_input)
      workspace = workspace_input
    elsif !project_input.empty? && File.exist?(project_input) && project_input.end_with?(".xcodeproj")
      project = project_input
    else
      # –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ
      found_ws = Dir["*.xcworkspace"].first
      found_pr = Dir["*.xcodeproj"].first
      workspace = found_ws if found_ws
      project   = found_pr if found_pr
    end

    UI.user_error!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω workspace –∏–ª–∏ project ‚Äî —É–∫–∞–∂–∏ XCODE_WORKSPACE –∏–ª–∏ PROJECT_NAME.") if workspace.nil? && project.nil?
    UI.user_error!("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ö–µ–º–∞ —Å–±–æ—Ä–∫–∏ (IOS_SCHEME/PROJECT_NAME).") if scheme.empty?

    UI.message("üìÇ PWD: #{Dir.pwd}")
    UI.message("‚û°Ô∏è  Using scheme: #{scheme}")
    UI.message("‚û°Ô∏è  Using workspace: #{workspace}") if workspace
    UI.message("‚û°Ô∏è  Using project:   #{project}")   if project

    # –ï—Å–ª–∏ –µ—Å—Ç—å Podfile ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥—ã
    if File.exist?("Podfile")
      cocoapods(
        clean: true,
        repo_update: true,
        use_bundle_exec: false
      )
    end

    common = {
      scheme: scheme,
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates",
      output_directory: "build/iOS/ipa_out"
    }

    if workspace
      build_app(common.merge(workspace: workspace))
    else
      build_app(common.merge(project: project))
    end
  end
end
