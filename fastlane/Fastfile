default_platform(:ios)

org, repo = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"] || "").split("/")

platform :ios do
  private_lane :run_match do |options|
    match(
      type: "appstore",
      readonly: options[:readonly],
      git_url: "git@github.com:#{ENV["MATCH_REPOSITORY"]}.git",
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [ENV["IOS_BUNDLE_ID"], "#{ENV["IOS_BUNDLE_ID"]}.notifications"]
    )
  end

  desc "One-time CI setup (creates deploy key and base config)"
  lane :setup_ci_integration do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo
    )

    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )

    setup_ci
  end

  # –í–∞–∂–Ω–æ: –¥–µ–ª–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–º.
  # STRICT_CERTS=1 -> —Ç–æ–ª—å–∫–æ readonly (build –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
  # –∏–Ω–∞—á–µ -> –∫–∞–∫ –≤ CI_Core (readonly, –ø—Ä–∏ –æ—à–∏–±–∫–µ fallback –≤ write)
  desc "Ensure certs/profiles exist"
  lane :ensure_certs do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )

    if ENV["STRICT_CERTS"] == "1"
      UI.message("üîê match: readonly=true (STRICT)")
      run_match(readonly: true)
    else
      begin
        UI.message("üîê match: readonly=true")
        run_match(readonly: true)
      rescue => e
        UI.important("readonly failed, fallback to write mode: #{e}")
        run_match(readonly: false)
      end
    end
  end

  desc "Generate/refresh certs & profiles (write mode)"
  lane :generate_certs do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    run_match(readonly: false)
  end

  desc "Build and upload to TestFlight"
  lane :build_ios do
    ensure_certs

    begin
      install_pods
    rescue => e
      UI.important("Pods install skipped/failed: #{e}")
    end

    # –ë–µ—Ä—ë–º –∫–∞—Ä—Ç—É –ø—Ä–æ—Ñ–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª match, –∏ –æ—Ç–¥–∞—ë–º –µ—ë gym.
    profiles = lane_context[:MATCH_PROVISIONING_PROFILE_MAPPING] || {}
    UI.message("Using provisioning profiles: #{profiles}")

    workspace_path = Dir["*.xcworkspace", "ios/*.xcworkspace"].first
    build_params = {
      scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
      export_method: "app-store",
      clean: true,
      xcargs: "-allowProvisioningUpdates",
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: profiles
      }
    }

    if workspace_path
      build_app(build_params.merge(workspace: workspace_path))
    else
      build_app(build_params.merge(
        project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj"
      ))
    end

    pilot(skip_waiting_for_build_processing: true)
  end
end
