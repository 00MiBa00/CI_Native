# fastlane/Fastfile

org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  # == One-time: —Å–æ–∑–¥–∞—Ç—å writable deploy key –≤ match-—Ä–µ–ø–æ (–∫–∞–∫ –≤ CI_Core)
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  # == –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥—Å–∞–π–Ω–∞ (WRITE) ‚Äî –∫–∞–∫ –≤ CI_Core
  desc "Sync codesigning certificates (WRITE), –∫–∞–∫ –≤ CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  # == –°–±–æ—Ä–∫–∞ .ipa –¥–ª—è App Store (–Ω–∞—Ç–∏–≤–∫–∞)
  desc "Build .ipa for App Store (native)"
  lane :build do
    # 1) –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–¥—Å–∞–π–Ω–∏–Ω–≥
    sync_certificates

    # 2) –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    scheme          = (ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]).to_s.strip
    workspace_input = (ENV["XCODE_WORKSPACE"] || "").to_s.strip
    project_input   = (ENV["XCODE_PROJECT"]   || "").to_s.strip
    project_input   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project_input.empty? && !ENV["PROJECT_NAME"].to_s.empty?

    # –∏–º–µ–Ω–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤ (–∫–∞–∫ –≤ CI_Core ‚Äì –≥–ª–∞–≤–Ω—ã–π –∏ extension)
    app_target       = (ENV["IOS_APP_TARGET"]       || scheme || ENV["PROJECT_NAME"] || "").to_s.strip
    extension_target = (ENV["IOS_EXTENSION_TARGET"] || "ImageNotificationServiceExt").to_s.strip

    # 3) –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (Fastfile –ª–µ–∂–∏—Ç –≤ fastlane/, —É—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
    repo_root = File.expand_path("..", __dir__)

    # 4) –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    workspace_path = workspace_input.empty? ? nil : File.expand_path(workspace_input, repo_root)
    project_path   = project_input.empty?   ? nil : File.expand_path(project_input,   repo_root)

    # 5) –∞–≤—Ç–æ-–ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if workspace_path.nil? && project_path.nil?
      found_ws = Dir[File.join(repo_root, "*.xcworkspace")].first
      found_pr = Dir[File.join(repo_root, "*.xcodeproj")].first
      workspace_path = found_ws if found_ws
      project_path   = found_pr if found_pr
    end

    # 6) –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥
    UI.user_error!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω workspace –∏–ª–∏ project ‚Äî —É–∫–∞–∂–∏ XCODE_WORKSPACE –∏–ª–∏ PROJECT_NAME.") if workspace_path.nil? && project_path.nil?
    UI.user_error!("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ö–µ–º–∞ —Å–±–æ—Ä–∫–∏ (IOS_SCHEME/PROJECT_NAME).") if scheme.empty?

    UI.message "üìÇ repo_root: #{repo_root}"
    UI.message "‚û°Ô∏è  Using scheme: #{scheme}"
    UI.message "‚û°Ô∏è  Using workspace: #{workspace_path}" if workspace_path
    UI.message "‚û°Ô∏è  Using project:   #{project_path}"   if project_path
    UI.message "üß© workspace exists? #{File.exist?(workspace_path)}" if workspace_path
    UI.message "üß© project exists?   #{File.exist?(project_path)}"   if project_path

    # 7) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ code signing (–∫–∞–∫ –≤ CI_Core)
    #    match —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç env –≤–∏–¥–∞:
    #    - sigh_<BUNDLE>_appstore
    #    - sigh_<BUNDLE>_appstore_profile-name
    #    - sigh_<BUNDLE>_appstore_team-id
    #    - sigh_<BUNDLE>.notifications_appstore (–∏ *_profile-name, *_team-id)
    bundle_id        = ENV["IOS_BUNDLE_ID"]
    team_id_main     = ENV["sigh_#{bundle_id}_appstore_team-id"]
    profile_main     = ENV["sigh_#{bundle_id}_appstore_profile-name"]
    profile_uuid_main= ENV["sigh_#{bundle_id}_appstore"]

    profile_ext      = ENV["sigh_#{bundle_id}.notifications_appstore_profile-name"]
    profile_uuid_ext = ENV["sigh_#{bundle_id}.notifications_appstore"]

    code_sign_identity = "Apple Distribution"

    # –¥–ª—è update_code_signing_settings –Ω—É–∂–µ–Ω .xcodeproj
    proj_for_signing = project_path || Dir[File.join(repo_root, "*.xcodeproj")].first
    UI.user_error!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .xcodeproj –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π") if proj_for_signing.nil? || !File.exist?(proj_for_signing)

    # –°–Ω–∞—á–∞–ª–∞ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π signing –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞‚Ä¶
    update_code_signing_settings(
      use_automatic_signing: true,
      path: proj_for_signing,
      team_id: team_id_main
    )

    # ‚Ä¶–∞ –∑–∞—Ç–µ–º –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤ –∑–∞–¥–∞—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ø–∞—Ç—Ç–µ—Ä–Ω CI_Core)

    # Extension
    if profile_ext && profile_uuid_ext && !profile_ext.empty? && !profile_uuid_ext.empty?
      update_code_signing_settings(
        use_automatic_signing: false,
        path: proj_for_signing,
        targets: extension_target,
        team_id: team_id_main,
        code_sign_identity: code_sign_identity,
        profile_name: profile_ext,
        profile_uuid: profile_uuid_ext
      )
    else
      UI.important("‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è extension –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ENV, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É: #{extension_target}")
    end

    # –ì–ª–∞–≤–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if profile_main && profile_uuid_main && !profile_main.empty? && !profile_uuid_main.empty?
      update_code_signing_settings(
        use_automatic_signing: false,
        path: proj_for_signing,
        targets: app_target,
        team_id: team_id_main,
        code_sign_identity: code_sign_identity,
        profile_name: profile_main,
        profile_uuid: profile_uuid_main
      )
    else
      UI.important("‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ENV, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É: #{app_target}")
    end

    # 8) –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è build_app
    common = {
      scheme: scheme,
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates",
      output_directory: File.join(repo_root, "build/iOS/ipa_out")
    }

    # 9) —Å–±–æ—Ä–∫–∞
    if workspace_path
      build_app(common.merge(workspace: workspace_path))
    else
      build_app(common.merge(project: project_path))
    end
  end
end
