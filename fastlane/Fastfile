default_platform(:ios)

platform :ios do
  # Build parity: use match via SSH deploy key repo (like CI_Core) if available
  private_lane :computed_git_url do
    if ENV["MATCH_GIT_URL"] && !ENV["MATCH_GIT_URL"].empty?
      return ENV["MATCH_GIT_URL"]
    elsif ENV["MATCH_REPOSITORY"] && !ENV["MATCH_REPOSITORY"].empty?
      return "git@github.com:#{ENV["MATCH_REPOSITORY"]}.git"
    else
      return nil
    end
  end

  private_lane :run_match do |options|
    params = {
      type: "appstore",
      readonly: options[:readonly]
    }
    gu = computed_git_url
    params[:git_url] = gu if gu
    params[:git_branch] = ENV["MATCH_GIT_BRANCH"] || "main"
    params[:app_identifier] = [
      ENV["IOS_BUNDLE_ID"],
      "#{ENV["IOS_BUNDLE_ID"]}.notifications"
    ]
    match(**params)
  end

  lane :ensure_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    begin
      UI.message("üîê match: readonly=true (CI)")
      run_match(readonly: true)
    rescue => e
      UI.important("match readonly failed, fallback to write mode: #{e}")
      run_match(readonly: false)
    end
  end

  # Parity with CI_Core: handle CocoaPods inside Fastlane and build via workspace if present
  lane :init_ci do
    ensure_certs

    # Install pods (same approach as in CI_Core)
    begin
      install_pods # respects Podfile if present
    rescue => e
      UI.important("Pods installation skipped or failed: #{e}")
    end

    # Detect workspace first (Pods), else project
    workspace_path = Dir["*.xcworkspace", "ios/*.xcworkspace"].first
    if workspace_path
      UI.message("üì¶ Detected workspace: #{workspace_path}, building with workspace")
      build_app(
        workspace: workspace_path,
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    else
      UI.message("üìÅ No .xcworkspace found, building Xcode project")
      build_app(
        project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj",
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    end

    pilot(skip_waiting_for_build_processing: true)
  end

  lane :generate_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    run_match(readonly: false)
  end
end
