default_platform(:ios)

platform :ios do
  before_all do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
  end

  desc "Setup CI (auto create MATCH_DEPLOY_KEY via GH_PAT)"
  lane :setup_ci do
    github_action(
      api_token: ENV["GH_PAT"]
    )
  end

  desc "Sync signing via match (SSH, supports short MATCH_REPOSITORY)"
  lane :sync_certificates do
    repo = ENV["MATCH_REPOSITORY"].to_s.strip
    if !repo.include?(":") && !repo.include?("://")
      repo = "git@github.com:#{repo}.git"
    end

    match(
      type: "appstore",
      readonly: false,
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV['IOS_BUNDLE_ID']}.notifications"
      ],
      storage_mode: "git",
      git_url: repo,
      git_branch: "main"
    )
  end

  desc "Resolve Swift Package Manager dependencies"
  lane :resolve_spm do
    sh "xcodebuild -resolvePackageDependencies -project #{ENV['PROJECT_NAME']}.xcodeproj -scheme #{ENV['PROJECT_NAME']}"
  end

  desc "Build .ipa from native Xcode project (SPM only)"
  lane :build do
    build_app(
      project: "#{ENV['PROJECT_NAME']}.xcodeproj",
      scheme: ENV["PROJECT_NAME"],
      configuration: "Release",
      export_method: "app-store",
      output_directory: "build/ios",
      output_name: "#{ENV['PROJECT_NAME']}.ipa",
      include_bitcode: false,
      clean: true
    )
  end

  desc "Upload to TestFlight (skip processing like Core)"
  lane :upload_beta do
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      distribute_external: false,
      groups: ["Internal QA"],
      changelog: "Automated build"
    )
  end

  desc "Release to App Store (metadata skipped)"
  lane :release do
    deliver(
      submit_for_review: false,
      force: true,
      skip_screenshots: true,
      skip_metadata: true
    )
  end
end
