org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  # == One-time: создать writable deploy key в match-репо (как в CI_Core)
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  # == Синхронизация кодсайна (WRITE) — как в CI_Core
  desc "Sync codesigning certificates (WRITE), как в CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  # == Сборка .ipa для App Store (нативка, без Unity)
  desc "Build .ipa for App Store (native)"
  lane :build do
    # 1) подтянуть кодсайнинг (поведение CI_Core)
    sync_certificates

    # 2) параметры для сборки — берём из env (как у вас в workflow)
    scheme    = ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]
    workspace = ENV["XCODE_WORKSPACE"].to_s.strip
    project   = ENV["XCODE_PROJECT"].to_s.strip
    project   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project.empty? && !ENV["PROJECT_NAME"].to_s.empty?

    # 3) сборка
    if !workspace.empty?
      build_app(
        workspace: workspace,
        scheme: scheme,
        export_method: "app-store",
        xcargs: "-allowProvisioningUpdates",
        output_directory: "build/iOS/ipa_out"
      )
    else
      build_app(
        project: project,
        scheme: scheme,
        export_method: "app-store",
        xcargs: "-allowProvisioningUpdates",
        output_directory: "build/iOS/ipa_out"
      )
    end
  end
end
