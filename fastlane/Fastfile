default_platform(:ios)

platform :ios do
  lane :init_ci do
    # Use built-in fastlane action (not a lane) to prep CI
    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )

    # Certificates & profiles via ENV (no Matchfile)
    match(
      type: "appstore",
      readonly: (ENV["MATCH_READONLY"] || "true") == "true",
      git_url: ENV["MATCH_GIT_URL"],
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV["IOS_BUNDLE_ID"]}.notifications"
      ],
      clone_branch_directly: true
    )

    # Build
    gym(
      project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj",
      scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
      export_method: "app-store",
      clean: true
    )

    # Upload to TestFlight (deliverfile kept for parity; we use pilot here)
    pilot(skip_waiting_for_build_processing: true)
  end

  desc "Only sync certs/profiles (use MATCH_READONLY=false in Generate Certs workflow)"
  lane :sync_certificates do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    match(
      type: "appstore",
      readonly: (ENV["MATCH_READONLY"] || "true") == "true",
      git_url: ENV["MATCH_GIT_URL"],
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV["IOS_BUNDLE_ID"]}.notifications"
      ],
      clone_branch_directly: true
    )
  end
end
