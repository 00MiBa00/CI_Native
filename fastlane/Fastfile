org, repo = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"] || "").split("/")

default_platform(:ios)

platform :ios do
  # centralized match call with our params
  private_lane :run_match do |options|
    match(
      type: "appstore",
      readonly: options[:readonly],
      git_url: "git@github.com:#{ENV["MATCH_REPOSITORY"]}.git",
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      app_identifier: [
        ENV["IOS_BUNDLE_ID"],
        "#{ENV["IOS_BUNDLE_ID"]}.notifications"
      ]
    )
  end

  lane :ensure_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )

    # —Å–Ω–∞—á–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "read-only" (–∫–∞–∫ –≤ CI)
    begin
      UI.message("üîê match: readonly=true")
      run_match(readonly: true)
    rescue => e
      UI.important("readonly failed, fallback to write mode: #{e}")
      run_match(readonly: false)
    end
  end

  # === –æ—Å–Ω–æ–≤–Ω–æ–π CI-–ª–µ–π–Ω (–∫–∞–∫ –≤ CI_Core) ===
  lane :init_ci do
    # 1) –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ deploy key –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo
    )

    # 2) —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã/–ø—Ä–æ—Ñ–∏–ª–∏
    ensure_certs

    # 3) Pods –≤–Ω—É—Ç—Ä–∏ Fastlane (–∫–∞–∫ —É —Ç–µ–±—è)
    begin
      install_pods
    rescue => e
      UI.important("Pods install skipped/failed: #{e}")
    end

    # 4) –°–±–æ—Ä–∫–∞ —á–µ—Ä–µ–∑ workspace, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî —á–µ—Ä–µ–∑ project
    workspace_path = Dir["*.xcworkspace", "ios/*.xcworkspace"].first
    if workspace_path
      UI.message("üì¶ Using workspace: #{workspace_path}")
      build_app(
        workspace: workspace_path,
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    else
      UI.message("üìÅ No .xcworkspace found, building Xcode project")
      build_app(
        project: ENV["XCODE_PROJECT"] || "#{ENV["PROJECT_NAME"]}.xcodeproj",
        scheme: ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"],
        export_method: "app-store",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      )
    end

    # 5) –≤—ã–≥—Ä—É–∑–∫–∞ –≤ TestFlight
    pilot(skip_waiting_for_build_processing: true)
  end

  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  lane :generate_certs do
    setup_ci
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"],
      is_key_content_base64: false
    )
    run_match(readonly: false)
  end
end
