org, repo             = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]  || "").split("/")

platform :ios do
  # == One-time: создать writable deploy key в match-репо (как в CI_Core)
  desc "Initialize CI with writable deploy key (one-time)"
  lane :init_ci do
    github_action(
      api_token:  ENV["GH_PAT"],
      org:        org,
      repo:       repo,
      match_org:  match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  # == Синхронизация кодсайна (WRITE) — как в CI_Core
  desc "Sync codesigning certificates (WRITE), как в CI_Core"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id:      ENV["APPSTORE_KEY_ID"],
      issuer_id:   ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV["APPSTORE_P8"]
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  # == Сборка .ipa для App Store (нативка)
  desc "Build .ipa for App Store (native)"
  lane :build do
    # 1️⃣ подтянуть кодсайнинг
    sync_certificates

    # 2️⃣ подготовить параметры окружения
    scheme          = (ENV["IOS_SCHEME"] || ENV["PROJECT_NAME"]).to_s.strip
    workspace_input = (ENV["XCODE_WORKSPACE"] || "").strip
    project_input   = (ENV["XCODE_PROJECT"] || "").strip
    project_input   = "#{ENV["PROJECT_NAME"]}.xcodeproj" if project_input.empty? && !ENV["PROJECT_NAME"].to_s.empty?

    # 3️⃣ определяем реальный workspace/project
    workspace = nil
    project   = nil

    if !workspace_input.empty? && File.exist?(workspace_input)
      workspace = workspace_input
    elsif !project_input.empty? && File.exist?(project_input) && project_input.end_with?(".xcodeproj")
      project = project_input
    else
      # авто-поиск (если переменные не заданы)
      found_ws = Dir["*.xcworkspace"].first
      found_pr = Dir["*.xcodeproj"].first
      if found_ws
        workspace = found_ws
      elsif found_pr
        project = found_pr
      end
    end

    # 4️⃣ защита от пустых значений
    UI.user_error!("❌ Не найден workspace или project — укажи XCODE_WORKSPACE или PROJECT_NAME.") if workspace.nil? && project.nil?
    UI.user_error!("❌ Не указана схема сборки (IOS_SCHEME/PROJECT_NAME).") if scheme.empty?

    UI.message("➡️  Using scheme: #{scheme}")
    UI.message("➡️  Using workspace: #{workspace}") if workspace
    UI.message("➡️  Using project:   #{project}")   if project

    # 5️⃣ параметры для build_app
    build_params = {
      scheme: scheme,
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates",
      output_directory: "build/iOS/ipa_out"
    }

    # 6️⃣ сборка
    if workspace
      build_app(build_params.merge(workspace: workspace))
    else
      build_app(build_params.merge(project: project))
    end
  end
end
